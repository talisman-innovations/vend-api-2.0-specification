{
  "x-stoplight": {
    "docs": {
      "showModels": false
    },
    "id": "vend/specs/api-2-0"
  },
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "API 2.0",
    "description": "Early release of version 2.0 of the Vend API.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact": {
      "name": "Vend Developer Relations Team",
      "url": "https://developers.vendhq.com",
      "email": "api@vendhq.com"
    },
    "termsOfService": "https://www.vendhq.com/terms"
  },
  "tags": [
    {
      "name": "Brands",
      "description": "Brand operations."
    },
    {
      "name": "Consignments",
      "description": "Stock control operations."
    },
    {
      "name": "Customers",
      "description": "Customer operations."
    },
    {
      "name": "Search",
      "description": "Search related operations"
    },
    {
      "name": "Channel request log",
      "description": "A log of requests and responses between Vend and an integration channel."
    }
  ],
  "host": "{domain_prefix}.vendhq.com",
  "basePath": "/api/2.0",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "x-explorer-enabled": false,
  "paths": {
    "/gift_cards": {
      "get": {
        "description": "Returns a paginated list of gift cards.",
        "summary": "List gift cards",
        "tags": [
          "Gift Cards"
        ],
        "operationId": "ListGiftCards",
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "type": "string",
            "description": "The upper limit for the ID to be included in the response."
          },
          {
            "in": "query",
            "name": "page_size",
            "type": "integer",
            "description": "The maximum number of items to be returned in the response. NOTE: 200 is the maximum value of the page_size parameter."
          },
          {
            "in": "query",
            "name": "card_number",
            "type": "string",
            "description": "Find by gift card number."
          },
          {
            "in": "query",
            "name": "status",
            "type": "string",
            "description": "Filter by gift card status.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "REDEEMED",
              "VOIDED",
              "EXPIRED"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The gift card list was successfully retrieved.",
            "schema": {
              "$ref": "#/definitions/GiftCardCollection"
            }
          }
        }
      },
      "post": {
        "description": "Creates and activates a new gift card. The gift card will be created with one transaction with status \"ACTIVATION\" which contains the initial balance of the gift card.",
        "summary": "Create gift card",
        "tags": [
          "Gift Cards"
        ],
        "operationId": "CreateGiftCard",
        "parameters": [
          {
            "name": "GiftCardActivationParams",
            "in": "body",
            "required": true,
            "description": "Create gift card parameters",
            "schema": {
              "$ref": "#/definitions/GiftCardActivationParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Gift card successfully created.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "422": {
            "description": "Gift card has already been created and activated.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      }
    },
    "/gift_cards/{number}": {
      "get": {
        "description": "Finds and returns the given card number. Returns a 404 if the card does not exist.\n\nWithin the gift card structure returned is the field gift__card__transactions which contains a list of all the transactions associated with the gift card. In this this list you will see one or more of the following statuses:\n\n* \"ACTIVATION\" - This transaction type is added automatically when the gift card is created. The amount will be the initial balance that was loaded onto the gift card.\n* \"REDEEMING\" - This status indicates the customer used their gift card to pay for one or more items. The amount MUST be negative.\n* \"IMPORTING\" - You should only see this if gift cards were imported into the gift card system.\n* \"VOIDING\" - You will see this status if the gift card has been voided. Note that the balance of the card is set to zero when the gift card is voided.\n* \"EXPIRING\" - This transaction is added automatically when the gift card expires. Again note that the balance is set to zero when the gift card expires.\n* \"REVERSING\" - This status indicates that a given transaction was reversed.\n* \"RELOADING\" - This status means that more credit was loaded onto the gift card.",
        "summary": "Find gift card",
        "tags": [
          "Gift Cards"
        ],
        "operationId": "FindGiftCard",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "type": "string",
            "description": "The number of the gift card to find.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gift card successfully retrieved.",
            "schema": {
              "$ref": "#/definitions/GiftCard"
            }
          },
          "404": {
            "description": "Gift card was not found.",
            "schema": {}
          }
        }
      },
      "delete": {
        "description": "Void the given gift card.",
        "summary": "Void gift card",
        "tags": [
          "Gift Cards"
        ],
        "operationId": "VoidGiftCard",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "type": "string",
            "description": "The number of the gift card to be voided.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gift card successfully voided.",
            "schema": {
              "$ref": "#/definitions/GiftCard"
            }
          },
          "404": {
            "description": "The gift card was not found.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      }
    },
    "/gift_cards/{number}/transactions": {
      "post": {
        "description": "Creates a new gift card transaction. The two most important fields for creating a new gift card transaction are the number of the gift card and the type of the transaction. The type determines what sort of transaction it is.\n \n* \"REDEEMING\" - Use this type when you want to redeem a certain amount from the gift card balance. The amount MUST be negative. If you want to add an amount to the balance use the \"RELOADING\" type.  \n* \"RELOADING\" - Use this type when you load a new amount onto a gift card. \n\nIf the gift card does not have enough credit to honour the transaction a 422 HTTP status code will be returned.\n\n## Idempotency\n\n Please populate the client_id field with a unique transaction identifier, to ensure that the transaction is safe from double-submit problems. See [the tutorial](/tutorials/guides/beta/gift_cards#idempotency) for more information.",
        "summary": "Create a gift card transaction",
        "tags": [
          "Gift Cards"
        ],
        "operationId": "CreateGiftCardTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "type": "string",
            "description": "The number of the gift card to add the transaction to.",
            "required": true
          },
          {
            "name": "GiftCardActivationParams",
            "in": "body",
            "required": true,
            "description": "Create gift card transaction parameters",
            "schema": {
              "$ref": "#/definitions/GiftCardTransactionParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Gift card transaction successfully created.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "403": {
            "description": "A 403 will be returned if the client id idempotency is violated.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "404": {
            "description": "The gift card was not found.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "422": {
            "description": "The gift card does not have enough credit to process this transaction.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      }
    },
    "/gift_cards/transactions/{transactionId}": {
      "get": {
        "description": "Finds and returns the card associated with the given transaction id. Returns a 404 if the gift card with the given transaction id was not found.",
        "summary": "Find gift card by transaction id",
        "tags": [
          "Gift Cards"
        ],
        "operationId": "FindGiftCardByTransactionId",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "type": "string",
            "description": "The transaction id of the gift card transaction to find.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The gift card with this transaction id was successfully found.",
            "schema": {
              "$ref": "#/definitions/GiftCard"
            }
          },
          "404": {
            "description": "The gift card associated with the transaction id was not found.",
            "schema": {}
          }
        }
      },
      "delete": {
        "description": "Reverse the given transction on the gift card. If the transaction is successful a new transaction will be added to the gift card transactions with the status \"REVERSING\".",
        "summary": "Reverse gift card transaction",
        "tags": [
          "Gift Cards"
        ],
        "operationId": "ReverseGiftCardTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "type": "string",
            "description": "The transaction id to be reversed for the gift card.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The gift card transaction was successfully reversed",
            "schema": {
              "$ref": "#/definitions/GiftCard"
            }
          },
          "404": {
            "description": "A 404 is returned if the gift card transaction is not found.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      }
    }
  },
  "definitions": {
    "GiftCard": {
      "title": "Gift Card",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string"
        },
        "number": {
          "description": "The gift card number.",
          "type": "string"
        },
        "sale_id": {
          "description": "The Sale ID.",
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "description": "The creation timestamp in UTC.",
          "type": "string"
        },
        "expires_at": {
          "description": "The expiry timestamp in UTC.",
          "type": "string"
        },
        "status": {
          "description": "The gift card status.",
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "REDEEMED",
            "VOIDED",
            "EXPIRED"
          ]
        },
        "balance": {
          "description": "The balance of the gift card.",
          "type": "number",
          "format": "double"
        },
        "total_sold": {
          "description": "the amount loaded onto this gift card during activation or reloading.",
          "type": "number",
          "format": "double"
        },
        "total_redeemed": {
          "description": "The amount redeemed with this gift card.",
          "type": "number",
          "format": "double"
        },
        "gift_card_transactions": {
          "type": "array",
          "description": "An array of Gift Card Transactions.",
          "items": {
            "$ref": "#/definitions/GiftCardTransaction"
          }
        }
      },
      "description": "The gift cards fields."
    },
    "GiftCardActivationParams": {
      "type": "object",
      "title": "Gift Card Activation Parameters",
      "properties": {
        "amount": {
          "type": "number",
          "description": "The amount to be loaded onto the gift card.",
          "format": "double"
        },
        "number": {
          "type": "string",
          "description": "The number of the gift card."
        },
        "user_id": {
          "type": "string",
          "description": "The user id of the user creating the gift card.",
          "format": "uuid"
        },
        "expires_at": {
          "type": "string",
          "description": "The expiry date time of the gift card."
        },
        "time_zone": {
          "type": "string",
          "description": "The timezone of the date times for the gift card."
        }
      },
      "required": [
        "amount",
        "number",
        "user_id"
      ],
      "description": "The parameters taken by the create gift card API."
    },
    "GiftCardTransactionParams": {
      "type": "object",
      "title": "Gift Card Transaction Parameters",
      "properties": {
        "amount": {
          "type": "number",
          "description": "The amount to be loaded onto the gift card.",
          "format": "double"
        },
        "type": {
          "type": "string",
          "description": "The type of the transaction",
          "enum": [
            "REDEEMING",
            "RELOADING"
          ]
        },
        "user_id": {
          "type": "string",
          "description": "The user id of the user creating the gift card.",
          "format": "uuid"
        },
        "client_id": {
          "type": "string",
          "description": "The client id is a unique transaction identifier. The client must provide this and is normally the transaction id from the client system."
        },
        "expires_at": {
          "type": "string",
          "description": "The expiry date time of the gift card."
        },
        "time_zone": {
          "type": "string",
          "description": "The timezone of the date times for the gift card."
        }
      },
      "required": [
        "amount",
        "type",
        "user_id",
        "client_id"
      ],
      "description": "The parameters that can be passed to the create giftcard API."
    },
    "GiftCardCollection": {
      "type": "object",
      "title": "Gift Card Collection",
      "properties": {
        "data": {
          "type": "array",
          "description": "An array of Gift Cards.",
          "items": {
            "$ref": "#/definitions/GiftCard"
          }
        }
      },
      "required": [
        "data"
      ],
      "description": "The fields returned by the gift card list API."
    },
    "GiftCardTransaction": {
      "title": "Image",
      "type": "object",
      "properties": {
        "id": {
          "description": "Auto-generated object ID.",
          "type": "string"
        },
        "amount": {
          "description": "The amount.",
          "type": "number",
          "format": "double"
        },
        "type": {
          "description": "The type of transaction.",
          "type": "string",
          "enum": [
            "ACTIVATION",
            "REDEEMING",
            "IMPORTING",
            "VOIDING",
            "EXPIRING",
            "REVERSING",
            "RELOADING"
          ]
        },
        "user_id": {
          "description": "The User ID associated with the transaction.",
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "description": "The creation timestamp in UTC.",
          "type": "string"
        },
        "client_id": {
          "description": "The client id is a unique transaction identifier. The client must provide this and is normally the transaction id from the client system.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "After": {
      "name": "after",
      "in": "query",
      "type": "integer",
      "format": "int64",
      "description": "The lower limit for the version numbers to be included in the response."
    },
    "Before": {
      "name": "before",
      "in": "query",
      "type": "integer",
      "format": "int64",
      "description": "The upper limit for the version numbers to be included in the response."
    },
    "Deleted": {
      "name": "deleted",
      "in": "query",
      "type": "boolean",
      "description": "Indicates whether deleted items should be included in the response."
    },
    "PageSize": {
      "name": "page_size",
      "in": "query",
      "type": "integer",
      "description": "The maximum number of items to be returned in the response."
    }
  },
  "security": [
    {
      "personal_token": []
    }
  ],
  "securityDefinitions": {
    "personal_token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
